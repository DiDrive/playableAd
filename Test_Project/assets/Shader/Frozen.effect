CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        iceColor: { value: [0.8, 0.9, 1.0, 1.0], editor: { type: color } }
        rimColor: { value: [1.0, 1.0, 1.0, 1.0], editor: { type: color } }
        frostTexture: { value: white }
        frozenIntensity: { value: 0.0 }
        rimPower: { value: 2.0 }
        noiseScale: { value: 1.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  in vec3 a_normal;

  out vec2 v_uv;
  out vec4 v_color;
  out vec3 v_normal;
  out vec3 v_viewDir;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    v_normal = (cc_matWorld * vec4(a_normal, 0.0)).xyz;
    vec3 worldPos = (cc_matWorld * pos).xyz;
    v_viewDir = normalize(cc_cameraPos.xyz - worldPos);
    
    pos = cc_matViewProj * cc_matWorld * pos;
    v_uv = a_texCoord;
    v_color = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <cc-global>
  #include <alpha-test>

  in vec2 v_uv;
  in vec4 v_color;
  in vec3 v_normal;
  in vec3 v_viewDir;

  uniform sampler2D frostTexture;
  uniform Constant {
    vec4 iceColor;
    vec4 rimColor;
    float frozenIntensity;
    float rimPower;
    float noiseScale;
  };

  // 简单的噪声函数
  float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    
    // 使用原始顶点颜色作为基础
    vec3 baseColor = v_color.rgb;
    
    // 使用扭曲的UV坐标来采样冰霜纹理
    vec2 noiseUV = v_uv * noiseScale;
    noiseUV += sin(noiseUV * 10.0 + cc_time.x) * 0.02;
    vec4 frost = texture(frostTexture, noiseUV);
    
    float rim = pow(1.0 - max(dot(normalize(v_normal), normalize(v_viewDir)), 0.0), rimPower);
    rim = smoothstep(0.3, 1.0, rim);
    
    // 混合颜色，保持原始颜色作为基础
    vec3 finalColor = mix(baseColor, iceColor.rgb, frozenIntensity);
    finalColor += frost.rgb * frozenIntensity;
    finalColor += rimColor.rgb * rim;
    
    // 添加冰晶效果
    float pattern = sin(v_uv.x * 40.0) * sin(v_uv.y * 40.0) * 0.1 * frozenIntensity;
    finalColor += pattern;
    
    // 确保颜色值在有效范围内
    finalColor = clamp(finalColor, 0.0, 1.0);
    
    o.rgb = finalColor;
    o.a = v_color.a;  // 使用原始顶点颜色的透明度

    return o;
  }
}%